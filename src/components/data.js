export const arr = [
  {
    title: 'props',
    discription:
      '{props.value} / {...array[0](номер элемента если имена пропса и переменной совпадают)}',
  },
  {
    title: 'useState',
    discription: "const [value, setValue] = useState('value'(начальное значение value))",
  },
  {
    title: 'children',
    discription:
      '{children}. Позволяет прописать разметку внутри дочернего компонента из родительского',
  },
  {
    title: 'Тернарники в разметке',
    discription: 'Можно использовать в разметке для достижения разных целей',
  },
  {
    title:
      '{array.map(elem => <Component key = {name.id} {... elem}(или условный title = {elem.title}) >)}',
    discription:
      'Эта запись - аналог v-for. Другими словами выводит все элементы из массива подставляя нужные значения(если нужно) в пропсы ',
  },
]
export const about = [
  {
    naming: 'Vue',
    info: 'Vue — JavaScript фреймворк для создания пользовательских интерфейсов. Он создан на стандартах HTML, CSS и JavaScript и предоставляет декларативную и компонентную модель программирования, которая помогает эффективно разрабатывать пользовательские интерфейсы любой сложности.',
  },
  {
    naming: 'React',
    info: 'React — это JavaScript-библиотека для создания пользовательских интерфейсов. Обратите внимание, что это именно библиотека, а не фреймворк. React часто называют фреймворком, но это ошибка. Во-первых, его использование ни к чему вас не обязывает, не формирует «фрейм» проекта. Во-вторых, React выполняет единственную задачу: показывает на странице компонент интерфейса, синхронизируя его с данными приложения, и только этой библиотеки в общем случае недостаточно для того, чтобы полностью реализовать проект.',
  },
  {
    naming: 'Angular',
    info: 'Angular — это фреймворк от компании Google для создания продвинутых бесшовных (одностраничных) веб-приложений — SPA (Single Page Applications) — на языках программирования TypeScript, JavaScript, Dart.',
  },
]
